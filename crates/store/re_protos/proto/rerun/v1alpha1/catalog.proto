// This is the second iteration of the catalog API. For now it lives alongside the existing `remote_store` APIs (and
// friends) but will ultimately replace them.

syntax = "proto3";

package rerun.catalog.v1alpha1;

import "google/protobuf/timestamp.proto";

service CatalogService {
  rpc FindEntries(FindEntriesRequest) returns (FindEntriesResponse) {}
  rpc CreateDatasetEntry(DatasetEntry) returns (DatasetEntry) {}
  rpc ReadDatasetEntry(EntryId) returns (DatasetEntry) {}
  rpc DeleteDatasetEntry(EntryId) returns (DeleteDatasetEntryResponse) {}
}

message FindEntriesRequest {
  EntryFilter filter = 1;
}

message FindEntriesResponse {
  repeated EntryDetails entries = 1;
}


message DeleteDatasetEntryResponse {}


message EntryFilter {
  optional string id = 1;
  optional string name = 2;
}


//
// COMMON
//

message EntryId {
  string id = 1;
}

// What type of entry. This has strong implication on which APIs are available for this entry.
enum EntryType {
  Dataset = 0;
  Table = 1;
  DatasetView = 2;
  TableView = 3;
}


// Minimal info about an Entry for high-level catalog summary
message EntryDetails {
  EntryId id = 1;
  string name = 2;
  EntryType type = 3;
  
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}



message DatasetEntry {
  EntryDetails details = 1;

  // Read-only
  DatasetManifest manifest = 2;
}


// Serves as both manifest info and "opaque" handle to the dataset APIs.
message DatasetManifest {
  string path = 1;
}