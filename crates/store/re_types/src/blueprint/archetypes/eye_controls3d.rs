// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye_controls3d.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: The controls for the 3D eye in a spatial 3D view.
///
/// This controls, for example, the kind of eye; the translation speed of the eye in 3D space (via the WASDQE keys).
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default)]
pub struct EyeControls3D {
    /// The kind of the eye for the spatial 3d view. This controls how the eye movement behaves when the user interact with the view.
    pub kind: Option<SerializedComponentBatch>,

    /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene). This can be adjusted depending on the size of the scene to move around quickly or more precisely.
    pub translation_speed: Option<SerializedComponentBatch>,
}

impl EyeControls3D {
    /// Returns the [`ComponentDescriptor`] for [`Self::kind`].
    ///
    /// The corresponding component is [`crate::blueprint::components::Eye3DKind`].
    #[inline]
    pub fn descriptor_kind() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:kind".into(),
            component_type: Some("rerun.blueprint.components.Eye3DKind".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::translation_speed`].
    ///
    /// The corresponding component is [`crate::components::LinearSpeed`].
    #[inline]
    pub fn descriptor_translation_speed() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:translation_speed".into(),
            component_type: Some("rerun.components.LinearSpeed".into()),
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            EyeControls3D::descriptor_kind(),
            EyeControls3D::descriptor_translation_speed(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            EyeControls3D::descriptor_kind(),
            EyeControls3D::descriptor_translation_speed(),
        ]
    });

impl EyeControls3D {
    /// The total number of components in the archetype: 0 required, 0 recommended, 2 optional
    pub const NUM_COMPONENTS: usize = 2usize;
}

impl ::re_types_core::Archetype for EyeControls3D {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.EyeControls3D".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Eye controls 3D"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let kind = arrays_by_descr
            .get(&Self::descriptor_kind())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_kind()));
        let translation_speed = arrays_by_descr
            .get(&Self::descriptor_translation_speed())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_translation_speed())
            });
        Ok(Self {
            kind,
            translation_speed,
        })
    }
}

impl ::re_types_core::AsComponents for EyeControls3D {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [self.kind.clone(), self.translation_speed.clone()]
            .into_iter()
            .flatten()
            .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for EyeControls3D {}

impl EyeControls3D {
    /// Create a new `EyeControls3D`.
    #[inline]
    pub fn new() -> Self {
        Self {
            kind: None,
            translation_speed: None,
        }
    }

    /// Update only some specific fields of a `EyeControls3D`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `EyeControls3D`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            kind: Some(SerializedComponentBatch::new(
                crate::blueprint::components::Eye3DKind::arrow_empty(),
                Self::descriptor_kind(),
            )),
            translation_speed: Some(SerializedComponentBatch::new(
                crate::components::LinearSpeed::arrow_empty(),
                Self::descriptor_translation_speed(),
            )),
        }
    }

    /// The kind of the eye for the spatial 3d view. This controls how the eye movement behaves when the user interact with the view.
    #[inline]
    pub fn with_kind(mut self, kind: impl Into<crate::blueprint::components::Eye3DKind>) -> Self {
        self.kind = try_serialize_field(Self::descriptor_kind(), [kind]);
        self
    }

    /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene). This can be adjusted depending on the size of the scene to move around quickly or more precisely.
    #[inline]
    pub fn with_translation_speed(
        mut self,
        translation_speed: impl Into<crate::components::LinearSpeed>,
    ) -> Self {
        self.translation_speed =
            try_serialize_field(Self::descriptor_translation_speed(), [translation_speed]);
        self
    }
}

impl ::re_byte_size::SizeBytes for EyeControls3D {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.kind.heap_size_bytes() + self.translation_speed.heap_size_bytes()
    }
}
