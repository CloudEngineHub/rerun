// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye_controls3d.fbs".

#pragma once

#include "../../blueprint/components/eye3d_kind.hpp"
#include "../../collection.hpp"
#include "../../component_batch.hpp"
#include "../../component_column.hpp"
#include "../../components/linear_speed.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: The controls for the 3D eye in a spatial 3D view.
    ///
    /// This controls, for example, the kind of eye; the translation speed of the eye in 3D space (via the WASDQE keys).
    ///
    /// âš  **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    ///
    struct EyeControls3D {
        /// The kind of the eye for the spatial 3d view. This controls how the eye movement behaves when the user interact with the view.
        std::optional<ComponentBatch> kind;

        /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene). This can be adjusted depending on the size of the scene to move around quickly or more precisely.
        std::optional<ComponentBatch> translation_speed;

      public:
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.blueprint.archetypes.EyeControls3D";

        /// `ComponentDescriptor` for the `kind` field.
        static constexpr auto Descriptor_kind = ComponentDescriptor(
            ArchetypeName, "EyeControls3D:kind",
            Loggable<rerun::blueprint::components::Eye3DKind>::ComponentType
        );
        /// `ComponentDescriptor` for the `translation_speed` field.
        static constexpr auto Descriptor_translation_speed = ComponentDescriptor(
            ArchetypeName, "EyeControls3D:translation_speed",
            Loggable<rerun::components::LinearSpeed>::ComponentType
        );

      public:
        EyeControls3D() = default;
        EyeControls3D(EyeControls3D&& other) = default;
        EyeControls3D(const EyeControls3D& other) = default;
        EyeControls3D& operator=(const EyeControls3D& other) = default;
        EyeControls3D& operator=(EyeControls3D&& other) = default;

        /// Update only some specific fields of a `EyeControls3D`.
        static EyeControls3D update_fields() {
            return EyeControls3D();
        }

        /// Clear all the fields of a `EyeControls3D`.
        static EyeControls3D clear_fields();

        /// The kind of the eye for the spatial 3d view. This controls how the eye movement behaves when the user interact with the view.
        EyeControls3D with_kind(const rerun::blueprint::components::Eye3DKind& _kind) && {
            kind = ComponentBatch::from_loggable(_kind, Descriptor_kind).value_or_throw();
            return std::move(*this);
        }

        /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene). This can be adjusted depending on the size of the scene to move around quickly or more precisely.
        EyeControls3D with_translation_speed(
            const rerun::components::LinearSpeed& _translation_speed
        ) && {
            translation_speed =
                ComponentBatch::from_loggable(_translation_speed, Descriptor_translation_speed)
                    .value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::EyeControls3D> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const blueprint::archetypes::EyeControls3D& archetype
        );
    };
} // namespace rerun
