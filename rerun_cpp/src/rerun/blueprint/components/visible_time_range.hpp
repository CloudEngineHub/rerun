// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/visible_time_range.fbs".

#pragma once

#include "../../blueprint/datatypes/visible_time_range.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: The range of values that will be included in a Space View query.
    struct VisibleTimeRange {
        rerun::blueprint::datatypes::VisibleTimeRange value;

      public:
        VisibleTimeRange() = default;

        VisibleTimeRange(rerun::blueprint::datatypes::VisibleTimeRange value_) : value(value_) {}

        VisibleTimeRange& operator=(rerun::blueprint::datatypes::VisibleTimeRange value_) {
            value = value_;
            return *this;
        }

        /// Cast to the underlying VisibleTimeRange datatype
        operator rerun::blueprint::datatypes::VisibleTimeRange() const {
            return value;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    /// \private
    template <>
    struct Loggable<blueprint::components::VisibleTimeRange> {
        using TypeFwd = rerun::blueprint::datatypes::VisibleTimeRange;
        static_assert(sizeof(TypeFwd) == sizeof(blueprint::components::VisibleTimeRange));
        static constexpr const char Name[] = "rerun.blueprint.components.VisibleTimeRange";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<TypeFwd>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::VisibleTimeRange` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::VisibleTimeRange* instances, size_t num_instances
        ) {
            return Loggable<TypeFwd>::to_arrow(
                reinterpret_cast<const TypeFwd*>(instances),
                num_instances
            );
        }
    };
} // namespace rerun
