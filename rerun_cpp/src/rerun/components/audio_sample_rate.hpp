// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/audio_sample_rate.fbs".

#pragma once

#include "../datatypes/float32.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Sample-rate of an PCM-encoded audio file, in Hz.
    ///
    /// Commonly 44100 Hz or 48000 Hz.
    ///
    /// Note that this is a slightly misleading name.
    /// An audio file consists of audio frames, each consisting of multiple audio samples.
    /// In a stereo audio file, each frame consists of two samples, one for the left channel and one for the right channel.
    /// So this should more accurately be called the _frame rate_ of the audio,
    /// but it is commonly known as the frame rate for historical reasons.
    struct AudioSampleRate {
        rerun::datatypes::Float32 value;

      public:
        AudioSampleRate() = default;

        AudioSampleRate(rerun::datatypes::Float32 value_) : value(value_) {}

        AudioSampleRate& operator=(rerun::datatypes::Float32 value_) {
            value = value_;
            return *this;
        }

        AudioSampleRate(float value_) : value(value_) {}

        AudioSampleRate& operator=(float value_) {
            value = value_;
            return *this;
        }

        /// Cast to the underlying Float32 datatype
        operator rerun::datatypes::Float32() const {
            return value;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Float32) == sizeof(components::AudioSampleRate));

    /// \private
    template <>
    struct Loggable<components::AudioSampleRate> {
        static constexpr const char Name[] = "rerun.components.AudioSampleRate";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Float32>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::AudioSampleRate` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::AudioSampleRate* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Float32>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Float32>::to_arrow(
                    &instances->value,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
