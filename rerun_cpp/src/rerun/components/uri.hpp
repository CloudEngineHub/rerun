// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/uri.fbs".

#pragma once

#include "../component_descriptor.hpp"
#include "../datatypes/utf8.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <string>
#include <utility>

namespace rerun::components {
    /// **Component**: A general URI (Uniform Resource Identifier).
    ///
    /// To specify a recording, use [archetypes.RecordingUri].
    struct Uri {
        rerun::datatypes::Utf8 uri;

      public:
        Uri() = default;

        Uri(rerun::datatypes::Utf8 uri_) : uri(std::move(uri_)) {}

        Uri& operator=(rerun::datatypes::Utf8 uri_) {
            uri = std::move(uri_);
            return *this;
        }

        Uri(std::string value_) : uri(std::move(value_)) {}

        Uri& operator=(std::string value_) {
            uri = std::move(value_);
            return *this;
        }

        /// Cast to the underlying Utf8 datatype
        operator rerun::datatypes::Utf8() const {
            return uri;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Utf8) == sizeof(components::Uri));

    /// \private
    template <>
    struct Loggable<components::Uri> {
        static constexpr ComponentDescriptor Descriptor = "rerun.components.Uri";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Utf8>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::Uri` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::Uri* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Utf8>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Utf8>::to_arrow(&instances->uri, num_instances);
            }
        }
    };
} // namespace rerun
