// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/archetypes/audio.fbs".

#pragma once

#include "../collection.hpp"
#include "../compiler_utils.hpp"
#include "../components/audio_sample_rate.hpp"
#include "../components/tensor_data.hpp"
#include "../data_cell.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: Raw uncompressed PCM-encoded audio data (e.g. WAV, AIFF, etc.).
    struct Audio {
        /// The audio data.
        ///
        /// Either a single-channel mono vector, or a 2xN matrix for stereo.
        rerun::components::TensorData data;

        /// Sample-rate of the audio data, in Hz.
        ///
        /// Commonly 44100 Hz (default) or 48000 Hz.
        std::optional<rerun::components::AudioSampleRate> sample_rate;

      public:
        static constexpr const char IndicatorComponentName[] = "rerun.components.AudioIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        Audio() = default;
        Audio(Audio&& other) = default;

        /// Sample-rate of the audio data, in Hz.
        ///
        /// Commonly 44100 Hz (default) or 48000 Hz.
        Audio with_sample_rate(rerun::components::AudioSampleRate _sample_rate) && {
            sample_rate = std::move(_sample_rate);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Returns the number of primary instances of this archetype.
        size_t num_instances() const {
            return 1;
        }
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::Audio> {
        /// Serialize all set component batches.
        static Result<std::vector<DataCell>> serialize(const archetypes::Audio& archetype);
    };
} // namespace rerun
