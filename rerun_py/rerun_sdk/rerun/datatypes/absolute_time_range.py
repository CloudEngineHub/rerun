# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/absolute_time_range.fbs".

# You can extend this class by creating a "AbsoluteTimeRangeExt" class in "absolute_time_range_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import Any, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
)

__all__ = ["AbsoluteTimeRange", "AbsoluteTimeRangeArrayLike", "AbsoluteTimeRangeBatch", "AbsoluteTimeRangeLike"]


def _absolute_time_range__timeline__special_field_converter_override(x: datatypes.Utf8Like) -> datatypes.Utf8:
    if isinstance(x, datatypes.Utf8):
        return x
    else:
        return datatypes.Utf8(x)


def _absolute_time_range__start__special_field_converter_override(x: datatypes.TimeIntLike) -> datatypes.TimeInt:
    if isinstance(x, datatypes.TimeInt):
        return x
    else:
        return datatypes.TimeInt(x)


def _absolute_time_range__end__special_field_converter_override(x: datatypes.TimeIntLike) -> datatypes.TimeInt:
    if isinstance(x, datatypes.TimeInt):
        return x
    else:
        return datatypes.TimeInt(x)


@define(init=False)
class AbsoluteTimeRange:
    """
    **Datatype**: Absolute time range bounds for a specific timeline.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    def __init__(
        self: Any, timeline: datatypes.Utf8Like, start: datatypes.TimeIntLike, end: datatypes.TimeIntLike
    ) -> None:
        """
        Create a new instance of the AbsoluteTimeRange datatype.

        Parameters
        ----------
        timeline:
            Name of the timeline this applies to.
        start:
            Low time boundary.
        end:
            High time boundary.

        """

        # You can define your own __init__ function as a member of AbsoluteTimeRangeExt in absolute_time_range_ext.py
        self.__attrs_init__(timeline=timeline, start=start, end=end)

    timeline: datatypes.Utf8 = field(converter=_absolute_time_range__timeline__special_field_converter_override)
    # Name of the timeline this applies to.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    start: datatypes.TimeInt = field(converter=_absolute_time_range__start__special_field_converter_override)
    # Low time boundary.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    end: datatypes.TimeInt = field(converter=_absolute_time_range__end__special_field_converter_override)
    # High time boundary.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


AbsoluteTimeRangeLike = AbsoluteTimeRange
AbsoluteTimeRangeArrayLike = Union[
    AbsoluteTimeRange,
    Sequence[AbsoluteTimeRangeLike],
]


class AbsoluteTimeRangeBatch(BaseBatch[AbsoluteTimeRangeArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("timeline", pa.utf8(), nullable=False, metadata={}),
        pa.field("start", pa.int64(), nullable=False, metadata={}),
        pa.field("end", pa.int64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: AbsoluteTimeRangeArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import TimeIntBatch, Utf8Batch

        if isinstance(data, AbsoluteTimeRange):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                Utf8Batch([x.timeline for x in data]).as_arrow_array(),  # type: ignore[misc, arg-type]
                TimeIntBatch([x.start for x in data]).as_arrow_array(),  # type: ignore[misc, arg-type]
                TimeIntBatch([x.end for x in data]).as_arrow_array(),  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
