# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/views/map.fbs".

from __future__ import annotations

from typing import Union

__all__ = ["MapView"]


from ... import datatypes
from ..._baseclasses import AsComponents, ComponentBatchLike
from ...datatypes import EntityPathLike, Utf8Like
from .. import archetypes as blueprint_archetypes
from ..api import SpaceView, SpaceViewContentsLike


class MapView(SpaceView):
    """
    **View**: A map view.

    Example
    -------
    ### Use a blueprint to create a MapView.:
    ```python
    import rerun as rr
    import rerun.blueprint as rrb

    rr.init("rerun_example_gps_coordinates", spawn=True)

    rr.log("points", rr.GeoPoints([[47.6344, 19.1397], [47.6334, 19.1399]]))

    # Create a map view to display the chart.
    blueprint = rrb.Blueprint(
        rrb.MapView(
            origin="points",
            name="MapView",
            options=rrb.archetypes.MapOptions(provider=rrb.components.MapProvider.MapboxStreets),
        ),
        collapse_panels=True,
    )

    rr.send_blueprint(blueprint)
    ```

    """

    def __init__(
        self,
        *,
        origin: EntityPathLike = "/",
        contents: SpaceViewContentsLike = "$origin/**",
        name: Utf8Like | None = None,
        visible: datatypes.BoolLike | None = None,
        defaults: list[Union[AsComponents, ComponentBatchLike]] = [],
        overrides: dict[EntityPathLike, list[ComponentBatchLike]] = {},
        options: blueprint_archetypes.MapOptions | None = None,
    ) -> None:
        """
        Construct a blueprint for a new MapView view.

        Parameters
        ----------
        origin:
            The `EntityPath` to use as the origin of this view.
            All other entities will be transformed to be displayed relative to this origin.
        contents:
            The contents of the view specified as a query expression.
            This is either a single expression, or a list of multiple expressions.
            See [rerun.blueprint.archetypes.SpaceViewContents][].
        name:
            The display name of the view.
        visible:
            Whether this view is visible.

            Defaults to true if not specified.
        defaults:
            List of default components or component batches to add to the space view. When an archetype
            in the view is missing a component included in this set, the value of default will be used
            instead of the normal fallback for the visualizer.
        overrides:
            Dictionary of overrides to apply to the space view. The key is the path to the entity where the override
            should be applied. The value is a list of component or component batches to apply to the entity.

            Important note: the path must be a fully qualified entity path starting at the root. The override paths
            do not yet support `$origin` relative paths or glob expressions.
            This will be addressed in <https://github.com/rerun-io/rerun/issues/6673>.
        options:
            Configures the look and feel of the map.

        """

        properties: dict[str, AsComponents] = {}
        if options is not None:
            if not isinstance(options, blueprint_archetypes.MapOptions):
                options = blueprint_archetypes.MapOptions(options)
            properties["MapOptions"] = options

        super().__init__(
            class_identifier="Map",
            origin=origin,
            contents=contents,
            name=name,
            visible=visible,
            properties=properties,
            defaults=defaults,
            overrides=overrides,
        )
